use common::sense;

use Radio::HackRF;
use Valence;

use PDL;
use PDL::Complex;
use PDL::Constants qw(PI);

use Cwd 'abs_path';



my $sample_rate = 8_000_000;
my $freq = 470_000;
my $amp_scale = 50;
my $pulse_width = 0.0005;
my $dc_offset = 5;



my $command_to_pulses_map = {
  U => 10,
  D => 40,
  L => 58,
  R => 64,

  UL => 28,
  UR => 34,
  DL => 52,
  DR => 46,
};


sub generate_base_sequence {
  my $pulses = shift;

  my @message = (
                  qw(1 1 1 0) x 4,
                  qw(1 0) x $pulses,
                );

  my $signal = rld(ones(scalar @message) * $pulse_width * $sample_rate,
                   pdl(@message));


  my $sample_sequence = sequence($signal->getdim(0)) * 2 * PI * ($freq/$sample_rate);

  my $carrier = cos($sample_sequence) + (i * sin($sample_sequence));

  $carrier *= $amp_scale;


  my $product = $signal * $carrier;

  $product += $dc_offset + ($dc_offset * i);


  return $product->byte->flat;
}



my $h = Radio::HackRF->new(freq => 35_000_000, sample_rate => $sample_rate, amp_enable => 1);


my $cmd = '';
my $signal;


$h->tx(sub {
  my $block_size = shift;

  print "$cmd\n";

  if ($cmd eq '') {
    $signal = undef;

    my $silence = zeros($block_size / 2) + ($dc_offset + ($dc_offset * i));

    return $silence->byte->flat->get_dataref;
  }

  if (!defined $signal) {
    $signal = generate_base_sequence($command_to_pulses_map->{$cmd});
  }

  my $transmission = $signal->slice("0:" . ($block_size - 1));

  $signal = $signal->rotate(-$block_size);

  return $transmission->get_dataref;
});





my $app_root = abs_path() . "/app";

my $v = Valence->new;

my $browser_window = $v->require('browser-window');
my $ipc = $v->require('ipc');

$v->require('app')->on(ready => sub {
  my $window = $browser_window->new({
                   width => 1000,
                   height => 600,
                   title => 'RC Car Driver',
               });

  $window->loadUrl("file://$app_root/index.html");

  $window->openDevTools() if $ENV{DEVTOOLS};

  $ipc->on('update_cmd' => sub {
    my ($event, $mycmd) = @_;

    print "SWITCH: $mycmd\n";
    $cmd = $mycmd;
  });
});

$v->run; ## enter event loop
